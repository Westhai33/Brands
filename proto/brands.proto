syntax = "proto3";

package api.v1;

option go_package = "internal/api/v1";

import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Brands and Models API";
    version: "1.0.0";
    description: "API для управления брендами и моделями.";
  };
  host: "localhost:7000";
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};

// gRPCService для управления брендами и моделями
service gRPCService {

  // ------------- Brands -------------
  rpc GetBrand(GetBrandRequest) returns (GetBrandResponse) {
    option (google.api.http) = {
      get: "/brands/{brand_id}"
    };
  }

  rpc GetAllBrands(GetAllBrandsRequest) returns (GetAllBrandsResponse) {
    option (google.api.http) = {
      get: "/brands"
    };
  }

  // ------------- Models -------------
  rpc GetModel(GetModelRequest) returns (GetModelResponse) {
    option (google.api.http) = {
      get: "/models/{model_id}"
    };
  }

  rpc GetAllModels(GetAllModelsRequest) returns (GetAllModelsResponse) {
    option (google.api.http) = {
      get: "/models"
    };
  }
}

// ------------------- Сообщения -------------------

// Brand Messages
message GetBrandRequest {
  int64 brand_id = 1 [
    (validate.rules).int64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

message GetBrandResponse {
  int64 brand_id = 1;
  string name = 2;
  string link = 3;
  string description = 4;
  string logo_url = 5;
  string cover_image_url = 6;
  int32 founded_year = 7;
  string origin_country = 8;
  int32 popularity = 9;
  bool is_premium = 10;
  bool is_upcoming = 11;
  string created_at = 12;
  string updated_at = 13;
}

message GetAllBrandsRequest {
  string filter = 1; // Пример фильтра: "name=Apple&origin_country=USA"
  string sort = 2;   // Поле сортировки, например "popularity" или "-popularity"
}

message GetAllBrandsResponse {
  repeated Brand brands = 1;
}

message Brand {
  int64 brand_id = 1;
  string name = 2;
  string link = 3;
  string description = 4;
  string logo_url = 5;
  string cover_image_url = 6;
  int32 founded_year = 7;
  string origin_country = 8;
  int32 popularity = 9;
  bool is_premium = 10;
  bool is_upcoming = 11;
  string created_at = 12;
  string updated_at = 13;
}

// Model Messages
message GetModelRequest {
  int64 model_id = 1 [
    (validate.rules).int64.gt = 0,
    (google.api.field_behavior) = REQUIRED
  ];
}

message GetModelResponse {
  int64 model_id = 1;
  int64 brand_id = 2;
  string name = 3;
  string release_date = 4;
  bool is_upcoming = 5;
  bool is_limited = 6;
  string created_at = 7;
  string updated_at = 8;
}

message GetAllModelsRequest {
  string filter = 1; // Пример фильтра: "name=ModelX&is_upcoming=true"
  string sort = 2;   // Поле сортировки, например "release_date" или "-release_date"
}

message GetAllModelsResponse {
  repeated Model models = 1;
}

message Model {
  int64 model_id = 1;
  int64 brand_id = 2;
  string name = 3;
  string release_date = 4;
  bool is_upcoming = 5;
  bool is_limited = 6;
  string created_at = 7;
  string updated_at = 8;
}
