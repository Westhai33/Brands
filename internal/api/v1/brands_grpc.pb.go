// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: brands.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GRPCService_GetBrand_FullMethodName     = "/api.v1.gRPCService/GetBrand"
	GRPCService_GetAllBrands_FullMethodName = "/api.v1.gRPCService/GetAllBrands"
	GRPCService_GetModel_FullMethodName     = "/api.v1.gRPCService/GetModel"
	GRPCService_GetAllModels_FullMethodName = "/api.v1.gRPCService/GetAllModels"
)

// GRPCServiceClient is the client API for GRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPCService для управления брендами и моделями
type GRPCServiceClient interface {
	// ------------- Brands -------------
	GetBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*GetBrandResponse, error)
	GetAllBrands(ctx context.Context, in *GetAllBrandsRequest, opts ...grpc.CallOption) (*GetAllBrandsResponse, error)
	// ------------- Models -------------
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error)
	GetAllModels(ctx context.Context, in *GetAllModelsRequest, opts ...grpc.CallOption) (*GetAllModelsResponse, error)
}

type gRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCServiceClient(cc grpc.ClientConnInterface) GRPCServiceClient {
	return &gRPCServiceClient{cc}
}

func (c *gRPCServiceClient) GetBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*GetBrandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBrandResponse)
	err := c.cc.Invoke(ctx, GRPCService_GetBrand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServiceClient) GetAllBrands(ctx context.Context, in *GetAllBrandsRequest, opts ...grpc.CallOption) (*GetAllBrandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllBrandsResponse)
	err := c.cc.Invoke(ctx, GRPCService_GetAllBrands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServiceClient) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelResponse)
	err := c.cc.Invoke(ctx, GRPCService_GetModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServiceClient) GetAllModels(ctx context.Context, in *GetAllModelsRequest, opts ...grpc.CallOption) (*GetAllModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllModelsResponse)
	err := c.cc.Invoke(ctx, GRPCService_GetAllModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCServiceServer is the server API for GRPCService service.
// All implementations must embed UnimplementedGRPCServiceServer
// for forward compatibility.
//
// gRPCService для управления брендами и моделями
type GRPCServiceServer interface {
	// ------------- Brands -------------
	GetBrand(context.Context, *GetBrandRequest) (*GetBrandResponse, error)
	GetAllBrands(context.Context, *GetAllBrandsRequest) (*GetAllBrandsResponse, error)
	// ------------- Models -------------
	GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error)
	GetAllModels(context.Context, *GetAllModelsRequest) (*GetAllModelsResponse, error)
	mustEmbedUnimplementedGRPCServiceServer()
}

// UnimplementedGRPCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGRPCServiceServer struct{}

func (UnimplementedGRPCServiceServer) GetBrand(context.Context, *GetBrandRequest) (*GetBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrand not implemented")
}
func (UnimplementedGRPCServiceServer) GetAllBrands(context.Context, *GetAllBrandsRequest) (*GetAllBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBrands not implemented")
}
func (UnimplementedGRPCServiceServer) GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedGRPCServiceServer) GetAllModels(context.Context, *GetAllModelsRequest) (*GetAllModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllModels not implemented")
}
func (UnimplementedGRPCServiceServer) mustEmbedUnimplementedGRPCServiceServer() {}
func (UnimplementedGRPCServiceServer) testEmbeddedByValue()                     {}

// UnsafeGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCServiceServer will
// result in compilation errors.
type UnsafeGRPCServiceServer interface {
	mustEmbedUnimplementedGRPCServiceServer()
}

func RegisterGRPCServiceServer(s grpc.ServiceRegistrar, srv GRPCServiceServer) {
	// If the following call pancis, it indicates UnimplementedGRPCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GRPCService_ServiceDesc, srv)
}

func _GRPCService_GetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).GetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCService_GetBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).GetBrand(ctx, req.(*GetBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCService_GetAllBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).GetAllBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCService_GetAllBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).GetAllBrands(ctx, req.(*GetAllBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCService_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCService_GetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCService_GetAllModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServiceServer).GetAllModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRPCService_GetAllModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServiceServer).GetAllModels(ctx, req.(*GetAllModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCService_ServiceDesc is the grpc.ServiceDesc for GRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.gRPCService",
	HandlerType: (*GRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBrand",
			Handler:    _GRPCService_GetBrand_Handler,
		},
		{
			MethodName: "GetAllBrands",
			Handler:    _GRPCService_GetAllBrands_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _GRPCService_GetModel_Handler,
		},
		{
			MethodName: "GetAllModels",
			Handler:    _GRPCService_GetAllModels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brands.proto",
}
